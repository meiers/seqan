/*!
@page LanguageEntities Language Entity Types

SeqAn is a C++ based library. In order to provide you with an outstanding performance, SeqAn heavily relies on template programming.

@htmlonly
<p>
Our way of using template programming leads to approaches possibly unfamiliar to you. For example functions that used to be member functions are technically implemented as global functions. For this reason we semantically annotated all variables, functions, metafunctions, classes, etc. throughout the whole online documentation with a <span class="data-lang-entity-example"><span>small label</span></span> to tell you with what you're semantically dealing - although there sometimes is no technical counterpart.
</p>

<p>We call the above mentioned things like variables, functions, metafunctions, classes, etc. <acronym title="Imagine you're trying to understand some piece of code. The code consists of units normally separated by white-spaces or the like. Those units can hold a value (variable), group a sequence of commands (function) or represent a template for some object (class). All of these units we call language entity type.">language entity type</acronym>s. This page serves as a reference for the language entity types used in SeqAn and answers the following questions:

<ul>
  <li>What is each language entity type originally <b>meant to do</b>?</li>
  <li>How is each lanuage entity type <b>used in SeqAn</b>?</li>
  <li>What <b>variants</b> of each lanuage entity type exist?</li>
</ul>
</p>
@endhtmlonly




@htmlonly <h2 data-lang-entity="typedef"><a name="typedef">Typedef</a></h2> @endhtmlonly

Typedefs are a C++ language feature that allows to give custom names to arbitrary types.

When programming SeqAn, they are often used for giving short names to complicated, nested template instantiations or to the result of a <a href="#metafunction">metafunction</a>.

@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
@endcode





@htmlonly <h2 data-lang-entity="concept"><a name="concept">Concept</a></h2> @endhtmlonly 

Concepts are <b>informal interfaces</b> that define a set of requirements for a type.

In contrast to Java interfaces, C++ concepts can be added to custom types and built-in types without having access to the source of the type. You might know the typical (Java) interface limitation if you ever tried to make a built-in type implement a custom interface.

Concepts are currently still a proposal for a future C++ language release and thus not respected by IDEs and compilers. As a consequence your IDE can't tell you if a concept's function is actually implemented for a given <a href="#class">class</a> or not. You may still expect the implementation to exist for an implementing <a href="#class">class</a> because this is what the SeqAn library guarantees. Functions and metafunctions that are part of a concept are called <a href="#interface_function">interface functions</a> respectively <a href="#interface_metafunction">interface metafunctions</a>.

@htmlonly <h3>Example</h3> @endhtmlonly

You may expect the globally implemented functions @link appendValue @endlink, @link append @endlink, @link assignValue @endlink and many others to work with @link String @endlink because they are part of @link SequenceConcept @endlink which is implemented by @link String @endlink.

Again, the mentioned functions are considered interface function (TODO: They are not, why not?!) although they are globally implemented due to the use of template programming.

@htmlonly <h3>External Resources</h3> @endhtmlonly

See the <a href="http://en.cppreference.com/w/cpp/concept">concepts chapter at cppreference.com</a>.





@htmlonly <h2 data-lang-entity="class"><a name="class">Class</a></h2> @endhtmlonly 

C++ allows the definition of custom types using classes that basically encapsulate variables and functions.

In SeqAn, classes usually have few to no technical member function. Instead their <a href="#member_function">member functions</a> are implemented globally and typically expect the class instance as the first argument.

Many classes in SeqAn are template classes which is roughly comparable to Java Generics.

@htmlonly <h3>Example</h3> @endhtmlonly

The following example shows a class that can hold two values of the same type.

@code{.cpp}
template class<T>;
class Pair {
    T values [2];
  public:
    Pair (T first, T second)
    {
      values[0]=first; values[1]=second;
    }
};
@endcode

@htmlonly
<code>Pair</code> can now be instantiated using <code>Pair&lt;int&gt myPair1 (42, 115);</code> or <code>Pair&lt;float&gt (3.141, 2.72);</code>.
@endhtmlonly




@htmlonly <h2 data-lang-entity="enum"><a name="enum">Enum</a></h2> @endhtmlonly 

Enums are a C/C++ feature that allow the definition of enumeration types.
Such types have a fixed number of values and each number has a name.

In SeqAn they are mainly used to define the integral value of @link metafunction::VALUE @endlink.

@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
enum MyEnum {
     ENUM_VALUE1,
     ENUM_VALUE2
};
@endcode

@code{.cpp}
template <> struct
QualityValueSize<Dna5Q>
{
    enum { VALUE = 63 };
};
@endcode





@htmlonly <h2 data-lang-entity="metafunction"><a name="metafunction">Metafunction</a></h2> @endhtmlonly 

Metafunctions are compile-time evaluated functions. They can be used to compute integral values at compile time or to
select certain types as functions of other types. See the <a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Metafunction">Metafunctions in the More C++ Idioms Wikibook</a> for more information.


@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode

@htmlonly <h3>Variants</h3> @endhtmlonly

@htmlonly
<dl>
    <dt data-lang-entity="global_metafunction"><a name="global_metafunction">Global Metafunction</a></dt>
	<dd><p>Global typedefs ...</p>
		<p>Lorem ipsum ...</p>
	</dd>
	<dd><p>In SeqAn ...</p></dd>
	<dd><p>The following code examples shows how to ...</p>
@endhtmlonly
@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode
@htmlonly</dd>
	<dt data-lang-entity="interface_metafunction"><a name="interface_metafunction">Interface Metafunction</a></dt>
	<dd><p>Grouped typedefs ...</p>
		<p>Lorem ipsum ...</p>
	</dd>
	<dd><p>In SeqAn ...</p></dd>
	<dd><p>The following code examples shows how to ...</p>
@endhtmlonly
@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode
@htmlonly</dd>
</dl>
@endhtmlonly





@htmlonly <h2 data-lang-entity="function"><a name="function">Function</a></h2> @endhtmlonly 
<p>Typedef allow for ...</p>
<p>In SeqAn they are mainly used for ...</p>

@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode

<h3>Variants</h3>
@htmlonly
<dl>
    <dt data-lang-entity="global_function"><a name="global_function">Global Function</a></dt>
	<dd><p>Global typedefs ...</p>
		<p>Lorem ipsum ...</p>
	</dd>
	<dd><p>In SeqAn ...</p></dd>
	<dd><p>The following code examples shows how to ...</p>
@endhtmlonly
@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode
@htmlonly</dd>
	<dt data-lang-entity="interface_function"><a name="interface_function">Interface Function</a></dt>
	<dd><p>Grouped typedefs ...</p>
		<p>Lorem ipsum ...</p>
	</dd>
	<dd><p>In SeqAn ...</p></dd>
	<dd><p>The following code examples shows how to ...</p>
@endhtmlonly
@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode
@htmlonly</dd>
	<dt data-lang-entity="member_function"><a name="member_function">Member Function</a></dt>
	<dd><p>Grouped typedefs ...</p>
		<p>Lorem ipsum ...</p>
	</dd>
	<dd><p>In SeqAn ...</p></dd>
	<dd><p>The following code examples shows how to ...</p>
@endhtmlonly
@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode
@htmlonly</dd>
</dl>
@endhtmlonly






@htmlonly <h2 data-lang-entity="tag"><a name="tag">Tag</a></h2> @endhtmlonly 

Tags are classes that are only used for their type. They are often used for tag-based dispatching.

@htmlonly <h3>Example</h3> @endhtmlonly

In SeqAn, tags are defined as follows.  This way, there can be multiple headers that all define the tag <tt>TagName</tt>
and you can still instantiate <tt>TagName()</tt> since the template <tt>Tag&lt;&gt;</tt> has a definition and a default
constructor.

@code{.cpp}
namespace seqan {

struct TagName_;
typedef Tag<TagName_> TagName;

}  // namespace seqan
@endcode

In contrast, the following tag definitions can only occur once.  Note that there is no way to circumvent the limitation
of only one occurence if your tag should have template parameters (shown below) or member variables (not shown).

@code{.cpp}
struct TagName {};

template <typename T>
struct AnotherTagName
{};
@endcode





@htmlonly <h2 data-lang-entity="variable"><a name="variable">Variable</a></h2> @endhtmlonly 

C++ variables.

@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode

<h3>Variants</h3>
@htmlonly
<dl>
    <dt data-lang-entity="global_variable"><a name="global_variable">Global Variable</a></dt>
	<dd><p>Global typedefs ...</p>
		<p>Lorem ipsum ...</p>
	</dd>
	<dd><p>In SeqAn ...</p></dd>
	<dd><p>The following code examples shows how to ...</p>
@endhtmlonly
@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode
@htmlonly</dd>
	<dt data-lang-entity="member_variable"><a name="member_variable">Member Variable</a></dt>
	<dd><p>Grouped typedefs ...</p>
		<p>Lorem ipsum ...</p>
	</dd>
	<dd><p>In SeqAn ...</p></dd>
	<dd><p>The following code examples shows how to ...</p>
@endhtmlonly
@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode
@htmlonly</dd>
</dl>
@endhtmlonly





@htmlonly <h2 data-lang-entity="adaption"><a name="adaption">Adaption</a></h2> @endhtmlonly 

Adaptions are collections of functions and metafunctions that make a type <b>T</b> follow an interface <b>C</b>.  This
can be used to make a class from an external library follow a SeqAn concept.

@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode





@htmlonly <h2 data-lang-entity="macro"><a name="macro">Macro</a></h2> @endhtmlonly 

Macros are pieces of code evaluated by the C preprocessor.

All SeqAn macros are prefixed with <tt>SEQAN_</tt>.

@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
// If SeqAn would provide a macro to compute the square of a number, it would
// look as follows.
#define SEQAN_SQUARE(x) (x * x)

// In applications and user code, it could be used as follows:
#define SQUARE(x) (x * x)

// The SeqAn library defines the SEQAN_ASSERT* macros, for example:
SEQAN_ASSERT_EQ(SQUARE(10), 100);
@endcode





@htmlonly <h2 data-lang-entity="generic"><a name="generic">Generic</a></h2> @endhtmlonly 
<p>Typedef allow for ...</p>
<p>In SeqAn they are mainly used for ...</p>

@htmlonly <h3>Example</h3> @endhtmlonly

@code{.cpp}
using namespace seqan;

typedef typename Iterator<String<char, Alloc<> >::Type TIt;

for (TIt it = begin(str, Standard()); it != end(str, Standard()); ++it)
    std::cout << *it;
std::cout << "\n";
@endcode


*/